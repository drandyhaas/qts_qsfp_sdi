// qsfp_xcvr_test_default_pma_settings_conf_0.v

// Generated using ACDS version 23.3 104

`timescale 1 ps / 1 ps
module qsfp_xcvr_test_default_pma_settings_conf_0 (
		input  wire        clock,            //         clock.clk
		input  wire        reset_n,          //         reset.reset_n
		output wire        master_wen,       // avalon_master.write_n
		output wire        master_oen,       //              .read_n
		output wire [3:0]  master_be,        //              .byteenable
		output wire [31:0] master_address,   //              .address
		output wire [31:0] master_wdata,     //              .writedata
		input  wire [31:0] master_rdata,     //              .readdata
		input  wire        readdatavalid_in, //              .readdatavalid
		input  wire        waitrequest_in,   //              .waitrequest
		input  wire        slave_read,       //  avalon_slave.read
		input  wire        slave_write,      //              .write
		output wire [31:0] slave_readdata,   //              .readdata
		input  wire [31:0] slave_writedata,  //              .writedata
		input  wire [3:0]  slave_address     //              .address
	);

	default_pma_settings_conf #(
		.XCVR_RECONFIG_BASE_ADDR  (32'b00000000000000000000000000000000),
		.XCVR_VOD_ADDR            (32'b00000000000000000000010000100100),
		.XCVR_PRE_1ST_ADDR        (32'b00000000000000000000010000011100),
		.XCVR_PRE_2ND_ADDR        (32'b00000000000000000000010000100000),
		.XCVR_POST_1ST_ADDR       (32'b00000000000000000000010000010100),
		.XCVR_POST_2ND_ADDR       (32'b00000000000000000000010000011000),
		.XCVR_CTLE_1S_ENABLE_ADDR (32'b00000000000000000000010001101100),
		.XCVR_CTLE_1S_ADDR        (32'b00000000000000000000010110011000),
		.XCVR_CTLE_4S_ADDR        (32'b00000000000000000000010110011100),
		.XCVR_DCGAIN_L8_ADDR      (32'b00000000000000000000010001101000),
		.XCVR_DCGAIN_H4_ADDR      (32'b00000000000000000000010001110000),
		.XCVR_VGA_ADDR            (32'b00000000000000000000010110000000)
	) default_pma_settings_conf_0 (
		.clock            (clock),            //   input,   width = 1,         clock.clk
		.reset_n          (reset_n),          //   input,   width = 1,         reset.reset_n
		.master_wen       (master_wen),       //  output,   width = 1, avalon_master.write_n
		.master_oen       (master_oen),       //  output,   width = 1,              .read_n
		.master_be        (master_be),        //  output,   width = 4,              .byteenable
		.master_address   (master_address),   //  output,  width = 32,              .address
		.master_wdata     (master_wdata),     //  output,  width = 32,              .writedata
		.master_rdata     (master_rdata),     //   input,  width = 32,              .readdata
		.readdatavalid_in (readdatavalid_in), //   input,   width = 1,              .readdatavalid
		.waitrequest_in   (waitrequest_in),   //   input,   width = 1,              .waitrequest
		.slave_read       (slave_read),       //   input,   width = 1,  avalon_slave.read
		.slave_write      (slave_write),      //   input,   width = 1,              .write
		.slave_readdata   (slave_readdata),   //  output,  width = 32,              .readdata
		.slave_writedata  (slave_writedata),  //   input,  width = 32,              .writedata
		.slave_address    (slave_address)     //   input,   width = 4,              .address
	);

endmodule
