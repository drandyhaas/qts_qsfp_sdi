// xcvr_test_system_altera_mm_interconnect_1920_zd6ql4a.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.3 104

`timescale 1 ps / 1 ps
module xcvr_test_system_altera_mm_interconnect_1920_zd6ql4a (
		input  wire [12:0] mm_bridge_0_m0_address,                        //                          mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                    //                                        .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                     //                                        .burstcount
		input  wire [3:0]  mm_bridge_0_m0_byteenable,                     //                                        .byteenable
		input  wire        mm_bridge_0_m0_read,                           //                                        .read
		output wire [31:0] mm_bridge_0_m0_readdata,                       //                                        .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                  //                                        .readdatavalid
		input  wire        mm_bridge_0_m0_write,                          //                                        .write
		input  wire [31:0] mm_bridge_0_m0_writedata,                      //                                        .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                    //                                        .debugaccess
		output wire [3:0]  freq_counter_0_csr_address,                    //                      freq_counter_0_csr.address
		output wire        freq_counter_0_csr_read,                       //                                        .read
		input  wire [31:0] freq_counter_0_csr_readdata,                   //                                        .readdata
		output wire [2:0]  data_pattern_generator_0_csr_slave_address,    //      data_pattern_generator_0_csr_slave.address
		output wire        data_pattern_generator_0_csr_slave_write,      //                                        .write
		output wire        data_pattern_generator_0_csr_slave_read,       //                                        .read
		input  wire [31:0] data_pattern_generator_0_csr_slave_readdata,   //                                        .readdata
		output wire [31:0] data_pattern_generator_0_csr_slave_writedata,  //                                        .writedata
		output wire [3:0]  data_pattern_generator_0_csr_slave_byteenable, //                                        .byteenable
		output wire [2:0]  data_pattern_checker_0_csr_slave_address,      //        data_pattern_checker_0_csr_slave.address
		output wire        data_pattern_checker_0_csr_slave_write,        //                                        .write
		output wire        data_pattern_checker_0_csr_slave_read,         //                                        .read
		input  wire [31:0] data_pattern_checker_0_csr_slave_readdata,     //                                        .readdata
		output wire [31:0] data_pattern_checker_0_csr_slave_writedata,    //                                        .writedata
		output wire [3:0]  data_pattern_checker_0_csr_slave_byteenable,   //                                        .byteenable
		input  wire        mm_bridge_0_reset_reset_bridge_in_reset_reset, // mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire        clk_50_clk_clk                                 //                              clk_50_clk.clk
	);

	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;     // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;        // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;     // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [12:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;         // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;            // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire    [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;      // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;   // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;            // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;           // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;       // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;      // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire   [31:0] freq_counter_0_csr_agent_m0_readdata;                                // freq_counter_0_csr_translator:uav_readdata -> freq_counter_0_csr_agent:m0_readdata
	wire          freq_counter_0_csr_agent_m0_waitrequest;                             // freq_counter_0_csr_translator:uav_waitrequest -> freq_counter_0_csr_agent:m0_waitrequest
	wire          freq_counter_0_csr_agent_m0_debugaccess;                             // freq_counter_0_csr_agent:m0_debugaccess -> freq_counter_0_csr_translator:uav_debugaccess
	wire   [12:0] freq_counter_0_csr_agent_m0_address;                                 // freq_counter_0_csr_agent:m0_address -> freq_counter_0_csr_translator:uav_address
	wire    [3:0] freq_counter_0_csr_agent_m0_byteenable;                              // freq_counter_0_csr_agent:m0_byteenable -> freq_counter_0_csr_translator:uav_byteenable
	wire          freq_counter_0_csr_agent_m0_read;                                    // freq_counter_0_csr_agent:m0_read -> freq_counter_0_csr_translator:uav_read
	wire          freq_counter_0_csr_agent_m0_readdatavalid;                           // freq_counter_0_csr_translator:uav_readdatavalid -> freq_counter_0_csr_agent:m0_readdatavalid
	wire          freq_counter_0_csr_agent_m0_lock;                                    // freq_counter_0_csr_agent:m0_lock -> freq_counter_0_csr_translator:uav_lock
	wire   [31:0] freq_counter_0_csr_agent_m0_writedata;                               // freq_counter_0_csr_agent:m0_writedata -> freq_counter_0_csr_translator:uav_writedata
	wire          freq_counter_0_csr_agent_m0_write;                                   // freq_counter_0_csr_agent:m0_write -> freq_counter_0_csr_translator:uav_write
	wire    [2:0] freq_counter_0_csr_agent_m0_burstcount;                              // freq_counter_0_csr_agent:m0_burstcount -> freq_counter_0_csr_translator:uav_burstcount
	wire          freq_counter_0_csr_agent_rf_source_valid;                            // freq_counter_0_csr_agent:rf_source_valid -> freq_counter_0_csr_agent_rsp_fifo:in_valid
	wire  [107:0] freq_counter_0_csr_agent_rf_source_data;                             // freq_counter_0_csr_agent:rf_source_data -> freq_counter_0_csr_agent_rsp_fifo:in_data
	wire          freq_counter_0_csr_agent_rf_source_ready;                            // freq_counter_0_csr_agent_rsp_fifo:in_ready -> freq_counter_0_csr_agent:rf_source_ready
	wire          freq_counter_0_csr_agent_rf_source_startofpacket;                    // freq_counter_0_csr_agent:rf_source_startofpacket -> freq_counter_0_csr_agent_rsp_fifo:in_startofpacket
	wire          freq_counter_0_csr_agent_rf_source_endofpacket;                      // freq_counter_0_csr_agent:rf_source_endofpacket -> freq_counter_0_csr_agent_rsp_fifo:in_endofpacket
	wire          freq_counter_0_csr_agent_rsp_fifo_out_valid;                         // freq_counter_0_csr_agent_rsp_fifo:out_valid -> freq_counter_0_csr_agent:rf_sink_valid
	wire  [107:0] freq_counter_0_csr_agent_rsp_fifo_out_data;                          // freq_counter_0_csr_agent_rsp_fifo:out_data -> freq_counter_0_csr_agent:rf_sink_data
	wire          freq_counter_0_csr_agent_rsp_fifo_out_ready;                         // freq_counter_0_csr_agent:rf_sink_ready -> freq_counter_0_csr_agent_rsp_fifo:out_ready
	wire          freq_counter_0_csr_agent_rsp_fifo_out_startofpacket;                 // freq_counter_0_csr_agent_rsp_fifo:out_startofpacket -> freq_counter_0_csr_agent:rf_sink_startofpacket
	wire          freq_counter_0_csr_agent_rsp_fifo_out_endofpacket;                   // freq_counter_0_csr_agent_rsp_fifo:out_endofpacket -> freq_counter_0_csr_agent:rf_sink_endofpacket
	wire          freq_counter_0_csr_agent_rdata_fifo_src_valid;                       // freq_counter_0_csr_agent:rdata_fifo_src_valid -> freq_counter_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] freq_counter_0_csr_agent_rdata_fifo_src_data;                        // freq_counter_0_csr_agent:rdata_fifo_src_data -> freq_counter_0_csr_agent:rdata_fifo_sink_data
	wire          freq_counter_0_csr_agent_rdata_fifo_src_ready;                       // freq_counter_0_csr_agent:rdata_fifo_sink_ready -> freq_counter_0_csr_agent:rdata_fifo_src_ready
	wire   [31:0] data_pattern_generator_0_csr_slave_agent_m0_readdata;                // data_pattern_generator_0_csr_slave_translator:uav_readdata -> data_pattern_generator_0_csr_slave_agent:m0_readdata
	wire          data_pattern_generator_0_csr_slave_agent_m0_waitrequest;             // data_pattern_generator_0_csr_slave_translator:uav_waitrequest -> data_pattern_generator_0_csr_slave_agent:m0_waitrequest
	wire          data_pattern_generator_0_csr_slave_agent_m0_debugaccess;             // data_pattern_generator_0_csr_slave_agent:m0_debugaccess -> data_pattern_generator_0_csr_slave_translator:uav_debugaccess
	wire   [12:0] data_pattern_generator_0_csr_slave_agent_m0_address;                 // data_pattern_generator_0_csr_slave_agent:m0_address -> data_pattern_generator_0_csr_slave_translator:uav_address
	wire    [3:0] data_pattern_generator_0_csr_slave_agent_m0_byteenable;              // data_pattern_generator_0_csr_slave_agent:m0_byteenable -> data_pattern_generator_0_csr_slave_translator:uav_byteenable
	wire          data_pattern_generator_0_csr_slave_agent_m0_read;                    // data_pattern_generator_0_csr_slave_agent:m0_read -> data_pattern_generator_0_csr_slave_translator:uav_read
	wire          data_pattern_generator_0_csr_slave_agent_m0_readdatavalid;           // data_pattern_generator_0_csr_slave_translator:uav_readdatavalid -> data_pattern_generator_0_csr_slave_agent:m0_readdatavalid
	wire          data_pattern_generator_0_csr_slave_agent_m0_lock;                    // data_pattern_generator_0_csr_slave_agent:m0_lock -> data_pattern_generator_0_csr_slave_translator:uav_lock
	wire   [31:0] data_pattern_generator_0_csr_slave_agent_m0_writedata;               // data_pattern_generator_0_csr_slave_agent:m0_writedata -> data_pattern_generator_0_csr_slave_translator:uav_writedata
	wire          data_pattern_generator_0_csr_slave_agent_m0_write;                   // data_pattern_generator_0_csr_slave_agent:m0_write -> data_pattern_generator_0_csr_slave_translator:uav_write
	wire    [2:0] data_pattern_generator_0_csr_slave_agent_m0_burstcount;              // data_pattern_generator_0_csr_slave_agent:m0_burstcount -> data_pattern_generator_0_csr_slave_translator:uav_burstcount
	wire          data_pattern_generator_0_csr_slave_agent_rf_source_valid;            // data_pattern_generator_0_csr_slave_agent:rf_source_valid -> data_pattern_generator_0_csr_slave_agent_rsp_fifo:in_valid
	wire  [107:0] data_pattern_generator_0_csr_slave_agent_rf_source_data;             // data_pattern_generator_0_csr_slave_agent:rf_source_data -> data_pattern_generator_0_csr_slave_agent_rsp_fifo:in_data
	wire          data_pattern_generator_0_csr_slave_agent_rf_source_ready;            // data_pattern_generator_0_csr_slave_agent_rsp_fifo:in_ready -> data_pattern_generator_0_csr_slave_agent:rf_source_ready
	wire          data_pattern_generator_0_csr_slave_agent_rf_source_startofpacket;    // data_pattern_generator_0_csr_slave_agent:rf_source_startofpacket -> data_pattern_generator_0_csr_slave_agent_rsp_fifo:in_startofpacket
	wire          data_pattern_generator_0_csr_slave_agent_rf_source_endofpacket;      // data_pattern_generator_0_csr_slave_agent:rf_source_endofpacket -> data_pattern_generator_0_csr_slave_agent_rsp_fifo:in_endofpacket
	wire          data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_valid;         // data_pattern_generator_0_csr_slave_agent_rsp_fifo:out_valid -> data_pattern_generator_0_csr_slave_agent:rf_sink_valid
	wire  [107:0] data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_data;          // data_pattern_generator_0_csr_slave_agent_rsp_fifo:out_data -> data_pattern_generator_0_csr_slave_agent:rf_sink_data
	wire          data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_ready;         // data_pattern_generator_0_csr_slave_agent:rf_sink_ready -> data_pattern_generator_0_csr_slave_agent_rsp_fifo:out_ready
	wire          data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_startofpacket; // data_pattern_generator_0_csr_slave_agent_rsp_fifo:out_startofpacket -> data_pattern_generator_0_csr_slave_agent:rf_sink_startofpacket
	wire          data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_endofpacket;   // data_pattern_generator_0_csr_slave_agent_rsp_fifo:out_endofpacket -> data_pattern_generator_0_csr_slave_agent:rf_sink_endofpacket
	wire          data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_valid;       // data_pattern_generator_0_csr_slave_agent:rdata_fifo_src_valid -> data_pattern_generator_0_csr_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_data;        // data_pattern_generator_0_csr_slave_agent:rdata_fifo_src_data -> data_pattern_generator_0_csr_slave_agent:rdata_fifo_sink_data
	wire          data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_ready;       // data_pattern_generator_0_csr_slave_agent:rdata_fifo_sink_ready -> data_pattern_generator_0_csr_slave_agent:rdata_fifo_src_ready
	wire   [31:0] data_pattern_checker_0_csr_slave_agent_m0_readdata;                  // data_pattern_checker_0_csr_slave_translator:uav_readdata -> data_pattern_checker_0_csr_slave_agent:m0_readdata
	wire          data_pattern_checker_0_csr_slave_agent_m0_waitrequest;               // data_pattern_checker_0_csr_slave_translator:uav_waitrequest -> data_pattern_checker_0_csr_slave_agent:m0_waitrequest
	wire          data_pattern_checker_0_csr_slave_agent_m0_debugaccess;               // data_pattern_checker_0_csr_slave_agent:m0_debugaccess -> data_pattern_checker_0_csr_slave_translator:uav_debugaccess
	wire   [12:0] data_pattern_checker_0_csr_slave_agent_m0_address;                   // data_pattern_checker_0_csr_slave_agent:m0_address -> data_pattern_checker_0_csr_slave_translator:uav_address
	wire    [3:0] data_pattern_checker_0_csr_slave_agent_m0_byteenable;                // data_pattern_checker_0_csr_slave_agent:m0_byteenable -> data_pattern_checker_0_csr_slave_translator:uav_byteenable
	wire          data_pattern_checker_0_csr_slave_agent_m0_read;                      // data_pattern_checker_0_csr_slave_agent:m0_read -> data_pattern_checker_0_csr_slave_translator:uav_read
	wire          data_pattern_checker_0_csr_slave_agent_m0_readdatavalid;             // data_pattern_checker_0_csr_slave_translator:uav_readdatavalid -> data_pattern_checker_0_csr_slave_agent:m0_readdatavalid
	wire          data_pattern_checker_0_csr_slave_agent_m0_lock;                      // data_pattern_checker_0_csr_slave_agent:m0_lock -> data_pattern_checker_0_csr_slave_translator:uav_lock
	wire   [31:0] data_pattern_checker_0_csr_slave_agent_m0_writedata;                 // data_pattern_checker_0_csr_slave_agent:m0_writedata -> data_pattern_checker_0_csr_slave_translator:uav_writedata
	wire          data_pattern_checker_0_csr_slave_agent_m0_write;                     // data_pattern_checker_0_csr_slave_agent:m0_write -> data_pattern_checker_0_csr_slave_translator:uav_write
	wire    [2:0] data_pattern_checker_0_csr_slave_agent_m0_burstcount;                // data_pattern_checker_0_csr_slave_agent:m0_burstcount -> data_pattern_checker_0_csr_slave_translator:uav_burstcount
	wire          data_pattern_checker_0_csr_slave_agent_rf_source_valid;              // data_pattern_checker_0_csr_slave_agent:rf_source_valid -> data_pattern_checker_0_csr_slave_agent_rsp_fifo:in_valid
	wire  [107:0] data_pattern_checker_0_csr_slave_agent_rf_source_data;               // data_pattern_checker_0_csr_slave_agent:rf_source_data -> data_pattern_checker_0_csr_slave_agent_rsp_fifo:in_data
	wire          data_pattern_checker_0_csr_slave_agent_rf_source_ready;              // data_pattern_checker_0_csr_slave_agent_rsp_fifo:in_ready -> data_pattern_checker_0_csr_slave_agent:rf_source_ready
	wire          data_pattern_checker_0_csr_slave_agent_rf_source_startofpacket;      // data_pattern_checker_0_csr_slave_agent:rf_source_startofpacket -> data_pattern_checker_0_csr_slave_agent_rsp_fifo:in_startofpacket
	wire          data_pattern_checker_0_csr_slave_agent_rf_source_endofpacket;        // data_pattern_checker_0_csr_slave_agent:rf_source_endofpacket -> data_pattern_checker_0_csr_slave_agent_rsp_fifo:in_endofpacket
	wire          data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_valid;           // data_pattern_checker_0_csr_slave_agent_rsp_fifo:out_valid -> data_pattern_checker_0_csr_slave_agent:rf_sink_valid
	wire  [107:0] data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_data;            // data_pattern_checker_0_csr_slave_agent_rsp_fifo:out_data -> data_pattern_checker_0_csr_slave_agent:rf_sink_data
	wire          data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_ready;           // data_pattern_checker_0_csr_slave_agent:rf_sink_ready -> data_pattern_checker_0_csr_slave_agent_rsp_fifo:out_ready
	wire          data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_startofpacket;   // data_pattern_checker_0_csr_slave_agent_rsp_fifo:out_startofpacket -> data_pattern_checker_0_csr_slave_agent:rf_sink_startofpacket
	wire          data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_endofpacket;     // data_pattern_checker_0_csr_slave_agent_rsp_fifo:out_endofpacket -> data_pattern_checker_0_csr_slave_agent:rf_sink_endofpacket
	wire          data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_valid;         // data_pattern_checker_0_csr_slave_agent:rdata_fifo_src_valid -> data_pattern_checker_0_csr_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_data;          // data_pattern_checker_0_csr_slave_agent:rdata_fifo_src_data -> data_pattern_checker_0_csr_slave_agent:rdata_fifo_sink_data
	wire          data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_ready;         // data_pattern_checker_0_csr_slave_agent:rdata_fifo_sink_ready -> data_pattern_checker_0_csr_slave_agent:rdata_fifo_src_ready
	wire          mm_bridge_0_m0_agent_cp_valid;                                       // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [106:0] mm_bridge_0_m0_agent_cp_data;                                        // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_0_m0_agent_cp_ready;                                       // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire          mm_bridge_0_m0_agent_cp_startofpacket;                               // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_bridge_0_m0_agent_cp_endofpacket;                                 // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_001_src_valid;                                                // router_001:src_valid -> rsp_demux:sink_valid
	wire  [106:0] router_001_src_data;                                                 // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                // rsp_demux:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                              // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                        // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                          // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [106:0] router_002_src_data;                                                 // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                              // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                        // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                          // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                                // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [106:0] router_003_src_data;                                                 // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                              // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                        // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                          // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_src_valid;                                                    // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [106:0] router_src_data;                                                     // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                    // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                  // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                            // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                              // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_valid;                                // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [106:0] mm_bridge_0_m0_limiter_rsp_src_data;                                 // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire          mm_bridge_0_m0_limiter_rsp_src_ready;                                // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire    [2:0] mm_bridge_0_m0_limiter_rsp_src_channel;                              // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire          mm_bridge_0_m0_limiter_rsp_src_startofpacket;                        // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_endofpacket;                          // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire    [0:0] mm_bridge_0_m0_limiter_cmd_src_valid;                                // mm_bridge_0_m0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [106:0] mm_bridge_0_m0_limiter_cmd_src_data;                                 // mm_bridge_0_m0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          mm_bridge_0_m0_limiter_cmd_src_ready;                                // limiter_pipeline:in_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire    [2:0] mm_bridge_0_m0_limiter_cmd_src_channel;                              // mm_bridge_0_m0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          mm_bridge_0_m0_limiter_cmd_src_startofpacket;                        // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          mm_bridge_0_m0_limiter_cmd_src_endofpacket;                          // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                      // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [106:0] limiter_pipeline_source0_data;                                       // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                      // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [2:0] limiter_pipeline_source0_channel;                                    // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                              // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                   // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [106:0] rsp_mux_src_data;                                                    // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                   // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                 // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                           // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                             // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                  // limiter_pipeline_001:out_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [106:0] limiter_pipeline_001_source0_data;                                   // limiter_pipeline_001:out_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                  // mm_bridge_0_m0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [2:0] limiter_pipeline_001_source0_channel;                                // limiter_pipeline_001:out_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                          // limiter_pipeline_001:out_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                            // limiter_pipeline_001:out_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cmd_mux_src_valid;                                                   // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [106:0] cmd_mux_src_data;                                                    // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                   // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                 // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                           // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                             // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                        // agent_pipeline:out_valid -> freq_counter_0_csr_agent:cp_valid
	wire  [106:0] agent_pipeline_source0_data;                                         // agent_pipeline:out_data -> freq_counter_0_csr_agent:cp_data
	wire          agent_pipeline_source0_ready;                                        // freq_counter_0_csr_agent:cp_ready -> agent_pipeline:out_ready
	wire    [2:0] agent_pipeline_source0_channel;                                      // agent_pipeline:out_channel -> freq_counter_0_csr_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                // agent_pipeline:out_startofpacket -> freq_counter_0_csr_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                  // agent_pipeline:out_endofpacket -> freq_counter_0_csr_agent:cp_endofpacket
	wire          freq_counter_0_csr_agent_rp_valid;                                   // freq_counter_0_csr_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [106:0] freq_counter_0_csr_agent_rp_data;                                    // freq_counter_0_csr_agent:rp_data -> agent_pipeline_001:in_data
	wire          freq_counter_0_csr_agent_rp_ready;                                   // agent_pipeline_001:in_ready -> freq_counter_0_csr_agent:rp_ready
	wire          freq_counter_0_csr_agent_rp_startofpacket;                           // freq_counter_0_csr_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          freq_counter_0_csr_agent_rp_endofpacket;                             // freq_counter_0_csr_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                    // agent_pipeline_001:out_valid -> router_001:sink_valid
	wire  [106:0] agent_pipeline_001_source0_data;                                     // agent_pipeline_001:out_data -> router_001:sink_data
	wire          agent_pipeline_001_source0_ready;                                    // router_001:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                            // agent_pipeline_001:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                              // agent_pipeline_001:out_endofpacket -> router_001:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                               // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire  [106:0] cmd_mux_001_src_data;                                                // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                               // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                             // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                       // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                         // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                    // agent_pipeline_002:out_valid -> data_pattern_generator_0_csr_slave_agent:cp_valid
	wire  [106:0] agent_pipeline_002_source0_data;                                     // agent_pipeline_002:out_data -> data_pattern_generator_0_csr_slave_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                    // data_pattern_generator_0_csr_slave_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [2:0] agent_pipeline_002_source0_channel;                                  // agent_pipeline_002:out_channel -> data_pattern_generator_0_csr_slave_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                            // agent_pipeline_002:out_startofpacket -> data_pattern_generator_0_csr_slave_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                              // agent_pipeline_002:out_endofpacket -> data_pattern_generator_0_csr_slave_agent:cp_endofpacket
	wire          data_pattern_generator_0_csr_slave_agent_rp_valid;                   // data_pattern_generator_0_csr_slave_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [106:0] data_pattern_generator_0_csr_slave_agent_rp_data;                    // data_pattern_generator_0_csr_slave_agent:rp_data -> agent_pipeline_003:in_data
	wire          data_pattern_generator_0_csr_slave_agent_rp_ready;                   // agent_pipeline_003:in_ready -> data_pattern_generator_0_csr_slave_agent:rp_ready
	wire          data_pattern_generator_0_csr_slave_agent_rp_startofpacket;           // data_pattern_generator_0_csr_slave_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          data_pattern_generator_0_csr_slave_agent_rp_endofpacket;             // data_pattern_generator_0_csr_slave_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                    // agent_pipeline_003:out_valid -> router_002:sink_valid
	wire  [106:0] agent_pipeline_003_source0_data;                                     // agent_pipeline_003:out_data -> router_002:sink_data
	wire          agent_pipeline_003_source0_ready;                                    // router_002:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                            // agent_pipeline_003:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                              // agent_pipeline_003:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                               // cmd_mux_002:src_valid -> agent_pipeline_004:in_valid
	wire  [106:0] cmd_mux_002_src_data;                                                // cmd_mux_002:src_data -> agent_pipeline_004:in_data
	wire          cmd_mux_002_src_ready;                                               // agent_pipeline_004:in_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                             // cmd_mux_002:src_channel -> agent_pipeline_004:in_channel
	wire          cmd_mux_002_src_startofpacket;                                       // cmd_mux_002:src_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                         // cmd_mux_002:src_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                    // agent_pipeline_004:out_valid -> data_pattern_checker_0_csr_slave_agent:cp_valid
	wire  [106:0] agent_pipeline_004_source0_data;                                     // agent_pipeline_004:out_data -> data_pattern_checker_0_csr_slave_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                    // data_pattern_checker_0_csr_slave_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [2:0] agent_pipeline_004_source0_channel;                                  // agent_pipeline_004:out_channel -> data_pattern_checker_0_csr_slave_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                            // agent_pipeline_004:out_startofpacket -> data_pattern_checker_0_csr_slave_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                              // agent_pipeline_004:out_endofpacket -> data_pattern_checker_0_csr_slave_agent:cp_endofpacket
	wire          data_pattern_checker_0_csr_slave_agent_rp_valid;                     // data_pattern_checker_0_csr_slave_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [106:0] data_pattern_checker_0_csr_slave_agent_rp_data;                      // data_pattern_checker_0_csr_slave_agent:rp_data -> agent_pipeline_005:in_data
	wire          data_pattern_checker_0_csr_slave_agent_rp_ready;                     // agent_pipeline_005:in_ready -> data_pattern_checker_0_csr_slave_agent:rp_ready
	wire          data_pattern_checker_0_csr_slave_agent_rp_startofpacket;             // data_pattern_checker_0_csr_slave_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          data_pattern_checker_0_csr_slave_agent_rp_endofpacket;               // data_pattern_checker_0_csr_slave_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                    // agent_pipeline_005:out_valid -> router_003:sink_valid
	wire  [106:0] agent_pipeline_005_source0_data;                                     // agent_pipeline_005:out_data -> router_003:sink_data
	wire          agent_pipeline_005_source0_ready;                                    // router_003:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                            // agent_pipeline_005:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                              // agent_pipeline_005:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [106:0] cmd_demux_src0_data;                                                 // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                              // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                        // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                          // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                          // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [106:0] mux_pipeline_source0_data;                                           // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                          // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [2:0] mux_pipeline_source0_channel;                                        // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                  // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                    // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire  [106:0] cmd_demux_src1_data;                                                 // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire          cmd_demux_src1_ready;                                                // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                              // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                        // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                          // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                      // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [106:0] mux_pipeline_001_source0_data;                                       // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                      // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [2:0] mux_pipeline_001_source0_channel;                                    // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                              // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                // cmd_demux:src2_valid -> mux_pipeline_002:in_valid
	wire  [106:0] cmd_demux_src2_data;                                                 // cmd_demux:src2_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src2_ready;                                                // mux_pipeline_002:in_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                              // cmd_demux:src2_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                        // cmd_demux:src2_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                          // cmd_demux:src2_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                      // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [106:0] mux_pipeline_002_source0_data;                                       // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                      // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire    [2:0] mux_pipeline_002_source0_channel;                                    // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                              // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                // rsp_demux:src0_valid -> mux_pipeline_003:in_valid
	wire  [106:0] rsp_demux_src0_data;                                                 // rsp_demux:src0_data -> mux_pipeline_003:in_data
	wire          rsp_demux_src0_ready;                                                // mux_pipeline_003:in_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                              // rsp_demux:src0_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_src0_startofpacket;                                        // rsp_demux:src0_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                          // rsp_demux:src0_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                      // mux_pipeline_003:out_valid -> rsp_mux:sink0_valid
	wire  [106:0] mux_pipeline_003_source0_data;                                       // mux_pipeline_003:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_003_source0_ready;                                      // rsp_mux:sink0_ready -> mux_pipeline_003:out_ready
	wire    [2:0] mux_pipeline_003_source0_channel;                                    // mux_pipeline_003:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                              // mux_pipeline_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                // mux_pipeline_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                            // rsp_demux_001:src0_valid -> mux_pipeline_004:in_valid
	wire  [106:0] rsp_demux_001_src0_data;                                             // rsp_demux_001:src0_data -> mux_pipeline_004:in_data
	wire          rsp_demux_001_src0_ready;                                            // mux_pipeline_004:in_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                          // rsp_demux_001:src0_channel -> mux_pipeline_004:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                    // rsp_demux_001:src0_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                      // rsp_demux_001:src0_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                      // mux_pipeline_004:out_valid -> rsp_mux:sink1_valid
	wire  [106:0] mux_pipeline_004_source0_data;                                       // mux_pipeline_004:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_004_source0_ready;                                      // rsp_mux:sink1_ready -> mux_pipeline_004:out_ready
	wire    [2:0] mux_pipeline_004_source0_channel;                                    // mux_pipeline_004:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_004_source0_startofpacket;                              // mux_pipeline_004:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                // mux_pipeline_004:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                            // rsp_demux_002:src0_valid -> mux_pipeline_005:in_valid
	wire  [106:0] rsp_demux_002_src0_data;                                             // rsp_demux_002:src0_data -> mux_pipeline_005:in_data
	wire          rsp_demux_002_src0_ready;                                            // mux_pipeline_005:in_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                          // rsp_demux_002:src0_channel -> mux_pipeline_005:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                    // rsp_demux_002:src0_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                      // rsp_demux_002:src0_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                      // mux_pipeline_005:out_valid -> rsp_mux:sink2_valid
	wire  [106:0] mux_pipeline_005_source0_data;                                       // mux_pipeline_005:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_005_source0_ready;                                      // rsp_mux:sink2_ready -> mux_pipeline_005:out_ready
	wire    [2:0] mux_pipeline_005_source0_channel;                                    // mux_pipeline_005:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_005_source0_startofpacket;                              // mux_pipeline_005:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                // mux_pipeline_005:out_endofpacket -> rsp_mux:sink2_endofpacket

	xcvr_test_system_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (13),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (13),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) mm_bridge_0_m0_translator (
		.clk                    (clk_50_clk_clk),                                                    //   input,   width = 1,                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 13, avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //   input,  width = 13,      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              // (terminated),                                        
		.av_begintransfer       (1'b0),                                                              // (terminated),                                        
		.av_chipselect          (1'b0),                                                              // (terminated),                                        
		.av_lock                (1'b0),                                                              // (terminated),                                        
		.uav_outputenable       (1'b0),                                                              // (terminated),                                        
		.uav_clken              (),                                                                  // (terminated),                                        
		.av_clken               (1'b1),                                                              // (terminated),                                        
		.uav_response           (2'b00),                                                             // (terminated),                                        
		.av_response            (),                                                                  // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                              // (terminated),                                        
		.av_writeresponsevalid  ()                                                                   // (terminated),                                        
	);

	xcvr_test_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (13),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) freq_counter_0_csr_translator (
		.clk                    (clk_50_clk_clk),                                //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (freq_counter_0_csr_agent_m0_address),           //   input,  width = 13, avalon_universal_slave_0.address
		.uav_burstcount         (freq_counter_0_csr_agent_m0_burstcount),        //   input,   width = 3,                         .burstcount
		.uav_read               (freq_counter_0_csr_agent_m0_read),              //   input,   width = 1,                         .read
		.uav_write              (freq_counter_0_csr_agent_m0_write),             //   input,   width = 1,                         .write
		.uav_waitrequest        (freq_counter_0_csr_agent_m0_waitrequest),       //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (freq_counter_0_csr_agent_m0_readdatavalid),     //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (freq_counter_0_csr_agent_m0_byteenable),        //   input,   width = 4,                         .byteenable
		.uav_readdata           (freq_counter_0_csr_agent_m0_readdata),          //  output,  width = 32,                         .readdata
		.uav_writedata          (freq_counter_0_csr_agent_m0_writedata),         //   input,  width = 32,                         .writedata
		.uav_lock               (freq_counter_0_csr_agent_m0_lock),              //   input,   width = 1,                         .lock
		.uav_debugaccess        (freq_counter_0_csr_agent_m0_debugaccess),       //   input,   width = 1,                         .debugaccess
		.av_address             (freq_counter_0_csr_address),                    //  output,   width = 4,      avalon_anti_slave_0.address
		.av_read                (freq_counter_0_csr_read),                       //  output,   width = 1,                         .read
		.av_readdata            (freq_counter_0_csr_readdata),                   //   input,  width = 32,                         .readdata
		.av_write               (),                                              // (terminated),                                       
		.av_writedata           (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_chipselect          (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	xcvr_test_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (13),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) data_pattern_generator_0_csr_slave_translator (
		.clk                    (clk_50_clk_clk),                                            //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //   input,   width = 1,                    reset.reset
		.uav_address            (data_pattern_generator_0_csr_slave_agent_m0_address),       //   input,  width = 13, avalon_universal_slave_0.address
		.uav_burstcount         (data_pattern_generator_0_csr_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (data_pattern_generator_0_csr_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (data_pattern_generator_0_csr_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (data_pattern_generator_0_csr_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (data_pattern_generator_0_csr_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (data_pattern_generator_0_csr_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (data_pattern_generator_0_csr_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (data_pattern_generator_0_csr_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (data_pattern_generator_0_csr_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (data_pattern_generator_0_csr_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (data_pattern_generator_0_csr_slave_address),                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (data_pattern_generator_0_csr_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (data_pattern_generator_0_csr_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (data_pattern_generator_0_csr_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (data_pattern_generator_0_csr_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (data_pattern_generator_0_csr_slave_byteenable),             //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                                          // (terminated),                                       
		.av_beginbursttransfer  (),                                                          // (terminated),                                       
		.av_burstcount          (),                                                          // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                      // (terminated),                                       
		.av_waitrequest         (1'b0),                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                          // (terminated),                                       
		.av_lock                (),                                                          // (terminated),                                       
		.av_chipselect          (),                                                          // (terminated),                                       
		.av_clken               (),                                                          // (terminated),                                       
		.uav_clken              (1'b0),                                                      // (terminated),                                       
		.av_debugaccess         (),                                                          // (terminated),                                       
		.av_outputenable        (),                                                          // (terminated),                                       
		.uav_response           (),                                                          // (terminated),                                       
		.av_response            (2'b00),                                                     // (terminated),                                       
		.uav_writeresponsevalid (),                                                          // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                       // (terminated),                                       
	);

	xcvr_test_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (13),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) data_pattern_checker_0_csr_slave_translator (
		.clk                    (clk_50_clk_clk),                                          //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),           //   input,   width = 1,                    reset.reset
		.uav_address            (data_pattern_checker_0_csr_slave_agent_m0_address),       //   input,  width = 13, avalon_universal_slave_0.address
		.uav_burstcount         (data_pattern_checker_0_csr_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (data_pattern_checker_0_csr_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (data_pattern_checker_0_csr_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (data_pattern_checker_0_csr_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (data_pattern_checker_0_csr_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (data_pattern_checker_0_csr_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (data_pattern_checker_0_csr_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (data_pattern_checker_0_csr_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (data_pattern_checker_0_csr_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (data_pattern_checker_0_csr_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (data_pattern_checker_0_csr_slave_address),                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (data_pattern_checker_0_csr_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (data_pattern_checker_0_csr_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (data_pattern_checker_0_csr_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (data_pattern_checker_0_csr_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (data_pattern_checker_0_csr_slave_byteenable),             //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_burstcount          (),                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                    // (terminated),                                       
		.av_waitrequest         (1'b0),                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	xcvr_test_system_altera_merlin_master_agent_1921_2inlndi #(
		.PKT_WUNIQUE               (93),
		.PKT_DOMAIN_H              (92),
		.PKT_DOMAIN_L              (91),
		.PKT_SNOOP_H               (90),
		.PKT_SNOOP_L               (87),
		.PKT_BARRIER_H             (86),
		.PKT_BARRIER_L             (85),
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_QOS_H                 (67),
		.PKT_QOS_L                 (67),
		.PKT_DATA_SIDEBAND_H       (65),
		.PKT_DATA_SIDEBAND_L       (65),
		.PKT_ADDR_SIDEBAND_H       (64),
		.PKT_ADDR_SIDEBAND_L       (64),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_CACHE_H               (79),
		.PKT_CACHE_L               (76),
		.PKT_THREAD_ID_H           (72),
		.PKT_THREAD_ID_L           (72),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_EXCLUSIVE       (54),
		.PKT_TRANS_LOCK            (53),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (55),
		.PKT_ADDR_H                (48),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (49),
		.PKT_TRANS_POSTED          (50),
		.PKT_TRANS_WRITE           (51),
		.PKT_TRANS_READ            (52),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (70),
		.PKT_POISON_H              (94),
		.PKT_POISON_L              (94),
		.PKT_DATACHK_H             (95),
		.PKT_DATACHK_L             (95),
		.PKT_ADDRCHK_H             (96),
		.PKT_ADDRCHK_L             (96),
		.PKT_SAI_H                 (97),
		.PKT_SAI_L                 (97),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) mm_bridge_0_m0_agent (
		.clk                   (clk_50_clk_clk),                                                    //   input,    width = 1,       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //   input,   width = 13,        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //  output,  width = 107,          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //   input,  width = 107,          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //   input,    width = 3,          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                  // (terminated),                         
		.av_writeresponsevalid ()                                                                   // (terminated),                         
	);

	xcvr_test_system_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_LOCK            (53),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (55),
		.PKT_ADDR_H                (48),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (49),
		.PKT_TRANS_POSTED          (50),
		.PKT_TRANS_WRITE           (51),
		.PKT_TRANS_READ            (52),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (70),
		.PKT_POISON_H              (94),
		.PKT_POISON_L              (94),
		.PKT_DATACHK_H             (95),
		.PKT_DATACHK_L             (95),
		.PKT_SAI_H                 (97),
		.PKT_SAI_L                 (97),
		.PKT_ADDRCHK_H             (96),
		.PKT_ADDRCHK_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) freq_counter_0_csr_agent (
		.clk                     (clk_50_clk_clk),                                      //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,       clk_reset.reset
		.m0_address              (freq_counter_0_csr_agent_m0_address),                 //  output,   width = 13,              m0.address
		.m0_burstcount           (freq_counter_0_csr_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (freq_counter_0_csr_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (freq_counter_0_csr_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (freq_counter_0_csr_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (freq_counter_0_csr_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (freq_counter_0_csr_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (freq_counter_0_csr_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (freq_counter_0_csr_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (freq_counter_0_csr_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (freq_counter_0_csr_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (freq_counter_0_csr_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (freq_counter_0_csr_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (freq_counter_0_csr_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (freq_counter_0_csr_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (freq_counter_0_csr_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                        //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                        //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                         //   input,  width = 107,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                  //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                      //   input,    width = 3,                .channel
		.rf_sink_ready           (freq_counter_0_csr_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (freq_counter_0_csr_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (freq_counter_0_csr_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (freq_counter_0_csr_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (freq_counter_0_csr_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (freq_counter_0_csr_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (freq_counter_0_csr_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (freq_counter_0_csr_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (freq_counter_0_csr_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (freq_counter_0_csr_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (freq_counter_0_csr_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (freq_counter_0_csr_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (freq_counter_0_csr_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (freq_counter_0_csr_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (freq_counter_0_csr_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (freq_counter_0_csr_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                 // (terminated),                               
	);

	xcvr_test_system_altera_avalon_sc_fifo_1931_fzgstwy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) freq_counter_0_csr_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_data           (freq_counter_0_csr_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (freq_counter_0_csr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (freq_counter_0_csr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (freq_counter_0_csr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (freq_counter_0_csr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (freq_counter_0_csr_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (freq_counter_0_csr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (freq_counter_0_csr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (freq_counter_0_csr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (freq_counter_0_csr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	xcvr_test_system_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_LOCK            (53),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (55),
		.PKT_ADDR_H                (48),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (49),
		.PKT_TRANS_POSTED          (50),
		.PKT_TRANS_WRITE           (51),
		.PKT_TRANS_READ            (52),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (70),
		.PKT_POISON_H              (94),
		.PKT_POISON_L              (94),
		.PKT_DATACHK_H             (95),
		.PKT_DATACHK_L             (95),
		.PKT_SAI_H                 (97),
		.PKT_SAI_L                 (97),
		.PKT_ADDRCHK_H             (96),
		.PKT_ADDRCHK_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) data_pattern_generator_0_csr_slave_agent (
		.clk                     (clk_50_clk_clk),                                                      //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1,       clk_reset.reset
		.m0_address              (data_pattern_generator_0_csr_slave_agent_m0_address),                 //  output,   width = 13,              m0.address
		.m0_burstcount           (data_pattern_generator_0_csr_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (data_pattern_generator_0_csr_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (data_pattern_generator_0_csr_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (data_pattern_generator_0_csr_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (data_pattern_generator_0_csr_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (data_pattern_generator_0_csr_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (data_pattern_generator_0_csr_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (data_pattern_generator_0_csr_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (data_pattern_generator_0_csr_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (data_pattern_generator_0_csr_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (data_pattern_generator_0_csr_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (data_pattern_generator_0_csr_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (data_pattern_generator_0_csr_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (data_pattern_generator_0_csr_slave_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (data_pattern_generator_0_csr_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                                     //   input,  width = 107,                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                                  //   input,    width = 3,                .channel
		.rf_sink_ready           (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (data_pattern_generator_0_csr_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (data_pattern_generator_0_csr_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (data_pattern_generator_0_csr_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (data_pattern_generator_0_csr_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (data_pattern_generator_0_csr_slave_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (data_pattern_generator_0_csr_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	xcvr_test_system_altera_avalon_sc_fifo_1931_fzgstwy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) data_pattern_generator_0_csr_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1, clk_reset.reset
		.in_data           (data_pattern_generator_0_csr_slave_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (data_pattern_generator_0_csr_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (data_pattern_generator_0_csr_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (data_pattern_generator_0_csr_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (data_pattern_generator_0_csr_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (data_pattern_generator_0_csr_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated),                         
		.csr_read          (1'b0),                                                                // (terminated),                         
		.csr_write         (1'b0),                                                                // (terminated),                         
		.csr_readdata      (),                                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated),                         
		.almost_full_data  (),                                                                    // (terminated),                         
		.almost_empty_data (),                                                                    // (terminated),                         
		.in_empty          (1'b0),                                                                // (terminated),                         
		.out_empty         (),                                                                    // (terminated),                         
		.in_error          (1'b0),                                                                // (terminated),                         
		.out_error         (),                                                                    // (terminated),                         
		.in_channel        (1'b0),                                                                // (terminated),                         
		.out_channel       ()                                                                     // (terminated),                         
	);

	xcvr_test_system_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_LOCK            (53),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (55),
		.PKT_ADDR_H                (48),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (49),
		.PKT_TRANS_POSTED          (50),
		.PKT_TRANS_WRITE           (51),
		.PKT_TRANS_READ            (52),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (70),
		.PKT_POISON_H              (94),
		.PKT_POISON_L              (94),
		.PKT_DATACHK_H             (95),
		.PKT_DATACHK_L             (95),
		.PKT_SAI_H                 (97),
		.PKT_SAI_L                 (97),
		.PKT_ADDRCHK_H             (96),
		.PKT_ADDRCHK_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) data_pattern_checker_0_csr_slave_agent (
		.clk                     (clk_50_clk_clk),                                                    //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1,       clk_reset.reset
		.m0_address              (data_pattern_checker_0_csr_slave_agent_m0_address),                 //  output,   width = 13,              m0.address
		.m0_burstcount           (data_pattern_checker_0_csr_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (data_pattern_checker_0_csr_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (data_pattern_checker_0_csr_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (data_pattern_checker_0_csr_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (data_pattern_checker_0_csr_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (data_pattern_checker_0_csr_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (data_pattern_checker_0_csr_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (data_pattern_checker_0_csr_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (data_pattern_checker_0_csr_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (data_pattern_checker_0_csr_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (data_pattern_checker_0_csr_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (data_pattern_checker_0_csr_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (data_pattern_checker_0_csr_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (data_pattern_checker_0_csr_slave_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (data_pattern_checker_0_csr_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                                  //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                                  //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                                   //   input,  width = 107,                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                            //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                                //   input,    width = 3,                .channel
		.rf_sink_ready           (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (data_pattern_checker_0_csr_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (data_pattern_checker_0_csr_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (data_pattern_checker_0_csr_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (data_pattern_checker_0_csr_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (data_pattern_checker_0_csr_slave_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (data_pattern_checker_0_csr_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	xcvr_test_system_altera_avalon_sc_fifo_1931_fzgstwy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) data_pattern_checker_0_csr_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                    //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_data           (data_pattern_checker_0_csr_slave_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (data_pattern_checker_0_csr_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (data_pattern_checker_0_csr_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (data_pattern_checker_0_csr_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (data_pattern_checker_0_csr_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (data_pattern_checker_0_csr_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	xcvr_test_system_altera_merlin_router_1921_rvqh52q router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //   input,  width = 107,          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_src_data),                               //  output,  width = 107,          .data
		.src_channel        (router_src_channel),                            //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_router_1921_22lk4la router_001 (
		.sink_ready         (agent_pipeline_001_source0_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),              //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),               //   input,  width = 107,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                           //  output,  width = 107,          .data
		.src_channel        (router_001_src_channel),                        //  output,    width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_router_1921_22lk4la router_002 (
		.sink_ready         (agent_pipeline_003_source0_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),              //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_003_source0_data),               //   input,  width = 107,          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                           //  output,  width = 107,          .data
		.src_channel        (router_002_src_channel),                        //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_router_1921_22lk4la router_003 (
		.sink_ready         (agent_pipeline_005_source0_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),              //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_005_source0_data),               //   input,  width = 107,          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                           //  output,  width = 107,          .data
		.src_channel        (router_003_src_channel),                        //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                           (0),
		.PKT_DEST_ID_H                        (71),
		.PKT_DEST_ID_L                        (70),
		.PKT_SRC_ID_H                         (69),
		.PKT_SRC_ID_L                         (68),
		.PKT_BYTE_CNT_H                       (57),
		.PKT_BYTE_CNT_L                       (55),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (50),
		.PKT_TRANS_WRITE                      (51),
		.PKT_TRANS_SEQ_H                      (106),
		.PKT_TRANS_SEQ_L                      (100),
		.MAX_OUTSTANDING_RESPONSES            (14),
		.PIPELINED                            (0),
		.ST_DATA_W                            (107),
		.ST_CHANNEL_W                         (3),
		.VALID_WIDTH                          (1),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                               //   input,  width = 107,          .data
		.cmd_sink_channel       (router_src_channel),                            //   input,    width = 3,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //  output,  width = 107,          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //  output,    width = 3,          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_src_valid),          //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),            //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),            //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),          //   input,    width = 3,          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),             //   input,  width = 107,          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),    //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),      //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //  output,  width = 107,          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //  output,    width = 3,          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket)     //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_demultiplexer_1921_gaw4kza cmd_demux (
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),              //   input,    width = 3,          .channel
		.sink_data          (limiter_pipeline_source0_data),                 //   input,  width = 107,          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),          //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                           //  output,  width = 107,          .data
		.src0_channel       (cmd_demux_src0_channel),                        //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                           //  output,  width = 107,          .data
		.src1_channel       (cmd_demux_src1_channel),                        //  output,    width = 3,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                          //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                          //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                           //  output,  width = 107,          .data
		.src2_channel       (cmd_demux_src2_channel),                        //  output,    width = 3,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_multiplexer_1922_caxee3y cmd_mux (
		.clk                 (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                              //  output,  width = 107,          .data
		.src_channel         (cmd_mux_src_channel),                           //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                    //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                  //   input,    width = 3,          .channel
		.sink0_data          (mux_pipeline_source0_data),                     //   input,  width = 107,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)               //   input,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_multiplexer_1922_caxee3y cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                          //  output,  width = 107,          .data
		.src_channel         (cmd_mux_001_src_channel),                       //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),              //   input,    width = 3,          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                 //   input,  width = 107,          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)           //   input,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_multiplexer_1922_caxee3y cmd_mux_002 (
		.clk                 (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                          //  output,  width = 107,          .data
		.src_channel         (cmd_mux_002_src_channel),                       //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),              //   input,    width = 3,          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                 //   input,  width = 107,          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)           //   input,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_demultiplexer_1921_7oucsfq rsp_demux (
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                        //   input,    width = 3,          .channel
		.sink_data          (router_001_src_data),                           //   input,  width = 107,          .data
		.sink_startofpacket (router_001_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                           //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_src0_channel),                        //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_demultiplexer_1921_7oucsfq rsp_demux_001 (
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                        //   input,    width = 3,          .channel
		.sink_data          (router_002_src_data),                           //   input,  width = 107,          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_demultiplexer_1921_7oucsfq rsp_demux_002 (
		.clk                (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                        //   input,    width = 3,          .channel
		.sink_data          (router_003_src_data),                           //   input,  width = 107,          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_merlin_multiplexer_1922_fin6qia rsp_mux (
		.clk                 (clk_50_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                              //  output,  width = 107,          .data
		.src_channel         (rsp_mux_src_channel),                           //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),              //   input,    width = 3,          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                 //   input,  width = 107,          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket),          //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_004_source0_ready),                //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_004_source0_valid),                //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_004_source0_channel),              //   input,    width = 3,          .channel
		.sink1_data          (mux_pipeline_004_source0_data),                 //   input,  width = 107,          .data
		.sink1_startofpacket (mux_pipeline_004_source0_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_004_source0_endofpacket),          //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_005_source0_ready),                //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_005_source0_valid),                //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_005_source0_channel),              //   input,    width = 3,          .channel
		.sink2_data          (mux_pipeline_005_source0_data),                 //   input,  width = 107,          .data
		.sink2_startofpacket (mux_pipeline_005_source0_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_005_source0_endofpacket)           //   input,    width = 1,          .endofpacket
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //  output,    width = 1,     sink0.ready
		.in_valid          (mm_bridge_0_m0_limiter_cmd_src_valid),          //   input,    width = 1,          .valid
		.in_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,          .endofpacket
		.in_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //   input,  width = 107,          .data
		.in_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //   input,    width = 3,          .channel
		.out_ready         (limiter_pipeline_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                 //  output,  width = 107,          .data
		.out_channel       (limiter_pipeline_source0_channel),              //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_001 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_src_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_src_data),                              //   input,  width = 107,          .data
		.in_channel        (rsp_mux_src_channel),                           //   input,    width = 3,          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),            //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),            //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),    //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),      //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),             //  output,  width = 107,          .data
		.out_channel       (limiter_pipeline_001_source0_channel),          //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                             //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_src_valid),                             //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_src_data),                              //   input,  width = 107,          .data
		.in_channel        (cmd_mux_src_channel),                           //   input,    width = 3,          .channel
		.out_ready         (agent_pipeline_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                   //  output,  width = 107,          .data
		.out_channel       (agent_pipeline_source0_channel),                //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_001 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (freq_counter_0_csr_agent_rp_ready),             //  output,    width = 1,     sink0.ready
		.in_valid          (freq_counter_0_csr_agent_rp_valid),             //   input,    width = 1,          .valid
		.in_startofpacket  (freq_counter_0_csr_agent_rp_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (freq_counter_0_csr_agent_rp_endofpacket),       //   input,    width = 1,          .endofpacket
		.in_data           (freq_counter_0_csr_agent_rp_data),              //   input,  width = 107,          .data
		.out_ready         (agent_pipeline_001_source0_ready),              //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),              //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),        //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),               //  output,  width = 107,          .data
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_channel       (),                                              // (terminated),                         
		.in_channel        (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_002 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                         //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                         //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_001_src_data),                          //   input,  width = 107,          .data
		.in_channel        (cmd_mux_001_src_channel),                       //   input,    width = 3,          .channel
		.out_ready         (agent_pipeline_002_source0_ready),              //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),              //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),        //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),               //  output,  width = 107,          .data
		.out_channel       (agent_pipeline_002_source0_channel),            //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_003 (
		.clk               (clk_50_clk_clk),                                            //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.in_ready          (data_pattern_generator_0_csr_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (data_pattern_generator_0_csr_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (data_pattern_generator_0_csr_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (data_pattern_generator_0_csr_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (data_pattern_generator_0_csr_slave_agent_rp_data),          //   input,  width = 107,          .data
		.out_ready         (agent_pipeline_003_source0_ready),                          //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                          //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                           //  output,  width = 107,          .data
		.in_empty          (1'b0),                                                      // (terminated),                         
		.out_empty         (),                                                          // (terminated),                         
		.out_error         (),                                                          // (terminated),                         
		.in_error          (1'b0),                                                      // (terminated),                         
		.out_channel       (),                                                          // (terminated),                         
		.in_channel        (1'b0)                                                       // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_004 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_002_src_ready),                         //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_002_src_valid),                         //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_002_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_002_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_002_src_data),                          //   input,  width = 107,          .data
		.in_channel        (cmd_mux_002_src_channel),                       //   input,    width = 3,          .channel
		.out_ready         (agent_pipeline_004_source0_ready),              //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),              //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),        //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),               //  output,  width = 107,          .data
		.out_channel       (agent_pipeline_004_source0_channel),            //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_005 (
		.clk               (clk_50_clk_clk),                                          //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, cr0_reset.reset
		.in_ready          (data_pattern_checker_0_csr_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (data_pattern_checker_0_csr_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (data_pattern_checker_0_csr_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (data_pattern_checker_0_csr_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (data_pattern_checker_0_csr_slave_agent_rp_data),          //   input,  width = 107,          .data
		.out_ready         (agent_pipeline_005_source0_ready),                        //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                        //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                         //  output,  width = 107,          .data
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_error          (1'b0),                                                    // (terminated),                         
		.out_channel       (),                                                        // (terminated),                         
		.in_channel        (1'b0)                                                     // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                          //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                          //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                    //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                           //   input,  width = 107,          .data
		.in_channel        (cmd_demux_src0_channel),                        //   input,    width = 3,          .channel
		.out_ready         (mux_pipeline_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                     //  output,  width = 107,          .data
		.out_channel       (mux_pipeline_source0_channel),                  //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_001 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                          //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                          //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                    //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src1_data),                           //   input,  width = 107,          .data
		.in_channel        (cmd_demux_src1_channel),                        //   input,    width = 3,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                 //  output,  width = 107,          .data
		.out_channel       (mux_pipeline_001_source0_channel),              //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_002 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                          //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                          //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                    //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src2_data),                           //   input,  width = 107,          .data
		.in_channel        (cmd_demux_src2_channel),                        //   input,    width = 3,          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                 //  output,  width = 107,          .data
		.out_channel       (mux_pipeline_002_source0_channel),              //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_003 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                          //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                          //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                    //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                           //   input,  width = 107,          .data
		.in_channel        (rsp_demux_src0_channel),                        //   input,    width = 3,          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                 //  output,  width = 107,          .data
		.out_channel       (mux_pipeline_003_source0_channel),              //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_004 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                      //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                      //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),              //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                       //   input,  width = 107,          .data
		.in_channel        (rsp_demux_001_src0_channel),                    //   input,    width = 3,          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                 //  output,  width = 107,          .data
		.out_channel       (mux_pipeline_004_source0_channel),              //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

	xcvr_test_system_altera_avalon_st_pipeline_stage_1930_bv2ucky #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (107),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_005 (
		.clk               (clk_50_clk_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                      //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                      //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),              //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                       //   input,  width = 107,          .data
		.in_channel        (rsp_demux_002_src0_channel),                    //   input,    width = 3,          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                 //  output,  width = 107,          .data
		.out_channel       (mux_pipeline_005_source0_channel),              //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_error          (1'b0)                                           // (terminated),                         
	);

endmodule
